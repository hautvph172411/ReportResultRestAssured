package api.ultis;import com.github.seratch.jslack.Slack;import com.github.seratch.jslack.api.webhook.Payload;import com.github.seratch.jslack.api.webhook.WebhookResponse;import java.io.IOException;import java.util.concurrent.TimeUnit;import okhttp3.MediaType;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;import org.testng.ITestContext;import org.testng.ITestListener;import org.testng.ITestResult;public class SlackNotificationUltis implements ITestListener {  private static String WEBHOOKS_URL = "https://hooks.slack.com/services/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";  private static String SLACK_CHANNEL = "notification";  public static void sendSlackNotification(String message) {    try {      StringBuilder msgBuilder = new StringBuilder();      msgBuilder.append(message);      Payload payload = Payload.builder().channel(SLACK_CHANNEL).text(msgBuilder.toString())          .build();      WebhookResponse var3 = Slack.getInstance().send(WEBHOOKS_URL, payload);    } catch (Exception var4) {      var4.printStackTrace();    }  }  @Override  public void onStart(ITestContext context) {    sendSlackNotification("============BookingCare============");    sendSlackMessage("\uD83D\uDCCB Report Result Suite: " + context.getSuite().getName());  }  @Override  public void onTestFailure(ITestResult result) {    String methodName = result.getMethod().getMethodName();    Throwable throwable = result.getThrowable();    if (throwable != null) {      String errorMessage = throwable.getMessage();      if (errorMessage != null) {        sendSlackMessage("❌ Test Failed:" + methodName + "\n" + errorMessage);      } else {        sendSlackMessage("❌ Test Failed:" + methodName + "\n" + "Check logs for detail");      }    } else {      sendSlackMessage("❌ Test Failed:" + methodName + "\n" + "Check logs for detail");    }  }  @Override  public void onTestSuccess(ITestResult result) {    String description = result.getMethod().getDescription();    sendSlackMessage(        "✅Test Passed method :" + result.getMethod().getMethodName() + "---Mô tả: " + description);  }  @Override  public void onFinish(ITestContext context) {    int passedCount = 0;    int failedCount = 0;    int skipCount = 0;    long totalTimeMillis = context.getEndDate().getTime() - context.getStartDate().getTime();    long totalTimeSeconds = TimeUnit.MILLISECONDS.toSeconds(totalTimeMillis);    String formatTime = totalTimeSeconds + "giây";    for (ITestResult result : context.getPassedTests().getAllResults()) {      if (result.getStatus() == ITestResult.SUCCESS) {        passedCount++;      }    }    for (ITestResult result : context.getFailedTests().getAllResults()) {      if (result.getStatus() == ITestResult.FAILURE) {        failedCount++;      }    }    for (ITestResult result : context.getFailedTests().getAllResults()) {      if (result.getStatus() == ITestResult.SKIP) {        skipCount++;      }    }    sendSlackMessage("Tổng số TestCase Đã chạy : " + context.getAllTestMethods().length        + ", ✅Đã Pass: " + passedCount        + ", ❌Đã Failure: " + failedCount        + ", \uD83D\uDEAB Đã Skip: " + skipCount        + "Tổng thời gian hoàn thành: " + formatTime    );  }  private void sendSlackMessage(String message) {    OkHttpClient client = new OkHttpClient();    MediaType mediaType = MediaType.parse("application/json");    String json = "{\"text\":\"" + message + "\"}";    RequestBody body = RequestBody.create(json, mediaType);    Request request = new Request.Builder()        .url(WEBHOOKS_URL)        .post(body)        .build();    try {      Response response = client.newCall(request).execute();      System.out.println(response.body().string());    } catch (IOException e) {      e.printStackTrace();    }  }}